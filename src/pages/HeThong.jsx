import React, { useState, useEffect } from "react";
import {
  Box,
  Tabs,
  Tab,
  Typography,
  Container,
  Card,
  CardHeader,
  CardContent,
  TextField,
  MenuItem,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Checkbox,
  Button,
  Grid,
  TableContainer,
  Paper,
  Tooltip,
  IconButton,
  Stack,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import SaveIcon from "@mui/icons-material/Save";
import AddIcon from "@mui/icons-material/Add";

import InfoIcon from "@mui/icons-material/Info";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import ScheduleIcon from "@mui/icons-material/Schedule";
import MenuBookIcon from "@mui/icons-material/MenuBook";

import { LocalizationProvider, DatePicker } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import "dayjs/locale/vi";
import dayjs from "dayjs";
import { setDoc, doc, getDoc } from "firebase/firestore";
import { db } from "../firebase";
import LinearProgress from "@mui/material/LinearProgress";

function TabPanel({ children, value, index }) {
  return (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}
    </div>
  );
}

export default function HeThong() {
  const [tab, setTab] = useState(0);
  const [namHoc, setNamHoc] = useState("2025-2026");

  const [selectedMon, setSelectedMon] = useState(null);
  const [newMon, setNewMon] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [ngayApDung, setNgayApDung] = useState(null);
  const [saving, setSaving] = useState(false);
  const [progress, setProgress] = useState(0);
  const [monHoc, setMonHoc] = useState({});

  // --- Map ƒë·ªô r·ªông cho t·ª´ng tab (ch·ªâ s·ª≠a ·ªü ƒë√¢y) ---
  const tabWidths = {
    0: "810px",  // Tab 1 - Th√¥ng tin chung
    1: "810px",  // Tab 2 - L·ªãch sinh ho·∫°t
    2: "810px",  // Tab 3 - Th·ªùi gian h·ªçc
    3: "1000px", // Tab 4 - Danh s√°ch m√¥n h·ªçc
  };
  // -------------------------------------------------

  // Tab 1: Th√¥ng tin chung
  const fetchTab1 = async () => {
    try {
      const docRef = doc(db, "THONGTIN", "INFO");
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        const data = docSnap.data();
        //console.log("‚úÖ D·ªØ li·ªáu Tab 1:", data);

        setUbnd(data.ubnd || "");
        setTruong(data.truong || "");
        setNamHoc(data.namHoc || "");
        setNgayApDung(data.ngayApDung ? dayjs(data.ngayApDung) : null);
      } else {
        console.warn("‚ö†Ô∏è Tab 1: Kh√¥ng c√≥ d·ªØ li·ªáu");
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi fetch Tab 1:", err);
    }
  };

  // ‚úÖ H√†m l·∫•y d·ªØ li·ªáu l·ªãch sinh ho·∫°t t·ª´ Firestore cho Tab 2
  const fetchTab2 = async () => {
    //console.log("üîÑ ƒêang g·ªçi fetchTab2...");

    try {
      const docSnap = await getDoc(doc(db, "SINHHOATCM", "LICHSINHHOAT"));
      if (docSnap.exists()) {
        const data = docSnap.data(); // { lichSinhHoat: [...] }
        //console.log("‚úÖ D·ªØ li·ªáu l·∫•y ƒë∆∞·ª£c t·ª´ Firestore:", data);

        const arr = (data.lichSinhHoat || []).map((item, index) => {
          //console.log(`üîç D√≤ng ${index}:`, item);
          return {
            khoi: item.khoi || `Kh·ªëi ${index + 1}`,
            thu: item.thu || "Th·ª© Hai",
          };
        });

        //console.log("üìã M·∫£ng sau khi x·ª≠ l√Ω:", arr);
        setLichSinhHoat(arr);
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y document LICHSINHHOAT, d√πng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh.");
        const defaultData = [
          { khoi: "Kh·ªëi 1", thu: "Th·ª© Hai" },
          { khoi: "Kh·ªëi 2", thu: "Th·ª© Ba" },
          { khoi: "Kh·ªëi 3", thu: "Th·ª© T∆∞" },
          { khoi: "Kh·ªëi 4", thu: "Th·ª© NƒÉm" },
          { khoi: "Kh·ªëi 5", thu: "Th·ª© S√°u" },
        ];
        //console.log("üìã D·ªØ li·ªáu m·∫∑c ƒë·ªãnh:", defaultData);
        setLichSinhHoat(defaultData);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu LICHSINHHOAT:", error);
    }
  };

  // Tab 3: Th·ªùi gian h·ªçc
  const fetchTab3 = async () => {
    try {
      const docRef = doc(db, "THOIGIANHOC", "thoiGian");
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        const data = docSnap.data();
        //console.log("‚úÖ D·ªØ li·ªáu Tab 3:", data);

        setThoiGianHoc({
          buoiSang: data.buoiSang || [],
          buoiChieu: data.buoiChieu || [],
        });
      } else {
        console.warn("‚ö†Ô∏è Tab 3: Kh√¥ng c√≥ d·ªØ li·ªáu");
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi fetch Tab 3:", err);
    }
  };

  useEffect(() => {
    if (tab === 0) fetchTab1();
    if (tab === 1) fetchTab2();
    if (tab === 2) fetchTab3();
  }, [tab]);

  useEffect(() => {
    const fetchMonHoc = async () => {
      try {
        let loaded = {};

        // ƒë·ªçc doc MON ƒë·ªÉ l·∫•y to√†n b·ªô danh s√°ch m√¥n
        const monSnap = await getDoc(doc(db, "MONHOC_2025-2026", "MON"));
        const { monHoc: allSubjects = [] } = monSnap.exists() ? monSnap.data() : {};

        // kh·ªüi t·∫°o state m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ m√¥n
        allSubjects.forEach((subject) => {
          loaded[subject] = { lop1: false, lop2: false, lop3: false, lop4: false, lop5: false };
        });

        // ƒë·ªçc t·∫•t c·∫£ doc K1..K5 v√† g√°n l·∫°i true n·∫øu m√¥n c√≥ trong danh s√°ch
        for (const { docId, key } of COLS) {
          const snap = await getDoc(doc(db, "MONHOC_2025-2026", docId));
          if (snap.exists()) {
            const { monHoc: monList = [] } = snap.data();

            monList.forEach((subject) => {
              if (!loaded[subject]) {
                // fallback n·∫øu trong Kx c√≥ m√¥n ch∆∞a c√≥ trong MON
                loaded[subject] = { lop1: false, lop2: false, lop3: false, lop4: false, lop5: false };
              }
              loaded[subject][key] = true;
            });
          }
        }

        setMonHoc(loaded); // c·∫≠p nh·∫≠t l·∫°i state
        //console.log("‚úÖ T·∫£i m√¥n h·ªçc th√†nh c√¥ng:", loaded);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i m√¥n h·ªçc:", err);
      }
    };

    fetchMonHoc();
  }, []);

  // Map gi·ªØa document trong Firestore v√† key checkbox trong state
  const COLS = [
    { docId: "K1", key: "lop1" },
    { docId: "K2", key: "lop2" },
    { docId: "K3", key: "lop3" },
    { docId: "K4", key: "lop4" },
    { docId: "K5", key: "lop5" },
  ];

  // L·∫•y danh s√°ch m√¥n c√≥ checkbox = true cho m·ªôt c·ªôt (key)
  const getSubjectsChecked = (key) =>
    Object.entries(monHoc)
      .filter(([, data]) => {
        if (typeof data === "boolean") return data; // fallback n·∫øu ch∆∞a ƒë·ªïi c·∫•u tr√∫c
        return !!data?.[key];
      })
      .map(([subject]) => subject);

  // L·∫•y to√†n b·ªô danh s√°ch m√¥n ·ªü c·ªôt "T√™n m√¥n h·ªçc"
  const getAllSubjects = () => Object.keys(monHoc);

  // C·∫≠p nh·∫≠t Firestore
  const handleUpdate_Tab4 = async () => {
    setSaving(true);       // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ti·∫øn tr√¨nh
    setProgress(10);       // Kh·ªüi ƒë·ªông ·ªü m·ª©c 10%

    try {
      const writes = COLS.map(({ docId, key }) => {
        const subjects = getSubjectsChecked(key);
        return setDoc(doc(db, "MONHOC_2025-2026", docId), { monHoc: subjects });
      });

      // th√™m ghi doc MON
      const allSubjects = getAllSubjects();
      writes.push(
        setDoc(doc(db, "MONHOC_2025-2026", "MON"), { monHoc: allSubjects })
      );

      await Promise.all(writes);

      //console.log("‚úÖ C·∫≠p nh·∫≠t m√¥n h·ªçc theo t·ª´ng l·ªõp + MON th√†nh c√¥ng.");
      setProgress(100);    // Ho√†n t·∫•t ti·∫øn tr√¨nh

      setTimeout(() => {
        setSaving(false);
        setProgress(0);
      }, 800); // Cho ng∆∞·ªùi d√πng th·∫•y hi·ªáu ·ª©ng ho√†n t·∫•t
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", err);
      setSaving(false);
      setProgress(0);
    }
  };

  const handleChange = (event, newValue) => setTab(newValue);

  const handleAddMon = () => {
    if (!newMon.trim()) return;
    if (monHoc.hasOwnProperty(newMon.trim())) return;
    setMonHoc({ ...monHoc, [newMon.trim()]: true });
    setNewMon("");
  };

  const handleEditMon = () => {
    if (!selectedMon || !newMon.trim()) return;
    const updated = { ...monHoc };
    delete updated[selectedMon];
    updated[newMon.trim()] = true;
    setMonHoc(updated);
    setNewMon("");
    setSelectedMon(null);
    setIsEditing(false);
  };

  const handleDeleteMon = (mon) => {
    const confirmDelete = window.confirm(`‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m√¥n "${mon}" kh√¥ng?`);

    if (!confirmDelete) return;

    const updated = { ...monHoc };
    delete updated[mon];
    setMonHoc(updated);
    setSelectedMon(null);
    setIsEditing(false);

    //console.log(`‚úÖ ƒê√£ x√≥a m√¥n "${mon}" kh·ªèi danh s√°ch.`);
  };

  // Khai b√°o state
  const [ubnd, setUbnd] = useState("X√£ B√¨nh Kh√°nh");
  const [truong, setTruong] = useState("B√¨nh Kh√°nh");

  const handleUpdate_Tab1 = async () => {
    setSaving(true);
    setProgress(10); // b·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh

    try {
      await setDoc(doc(db, "THONGTIN", "INFO"), {
        ubnd,
        truong,
        namHoc,
        ngayApDung: ngayApDung ? dayjs(ngayApDung).format("YYYY-MM-DD") : null,
      });

      setProgress(100); // ho√†n t·∫•t
      setTimeout(() => {
        setSaving(false);
        setProgress(0);
      }, 1000); // cho ng∆∞·ªùi d√πng th·∫•y ti·∫øn tr√¨nh ho√†n t·∫•t
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u Tab 1:", err);
      setSaving(false);
      setProgress(0);
    }
  };

 const [lichSinhHoat, setLichSinhHoat] = useState([
  { khoi: "Kh·ªëi 1", thu: "Th·ª© Hai" },
  { khoi: "Kh·ªëi 2", thu: "Th·ª© Ba" },
  { khoi: "Kh·ªëi 3", thu: "Th·ª© T∆∞" },
  { khoi: "Kh·ªëi 4", thu: "Th·ª© NƒÉm" },
  { khoi: "Kh·ªëi 5", thu: "Th·ª© S√°u" },
]);

  
  const handleUpdate_Tab2 = async () => {
    setSaving(true);       // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ti·∫øn tr√¨nh
    setProgress(10);       // Kh·ªüi ƒë·ªông ·ªü m·ª©c 10%

    try {
      await setDoc(doc(db, "SINHHOATCM", "LICHSINHHOAT"), {
        lichSinhHoat, // l∆∞u m·∫£ng {khoi, thu}
      });

      setProgress(100);    // ƒê·∫∑t ti·∫øn tr√¨nh ho√†n t·∫•t
      setTimeout(() => {
        setSaving(false);  // ·∫®n ti·∫øn tr√¨nh sau khi ho√†n t·∫•t
        setProgress(0);    // Reset v·ªÅ 0 ƒë·ªÉ s·∫µn s√†ng cho l·∫ßn sau
      }, 1000);
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u Tab 2:", err);
      setSaving(false);
      setProgress(0);
    }
  };

  // Kh·ªüi t·∫°o state
const [thoiGianHoc, setThoiGianHoc] = useState({
  buoiSang: [
    { tiet: "Ti·∫øt 1", gio: "07h00 - 07h40" },
    { tiet: "Ti·∫øt 2", gio: "07h45 - 08h25" },
    { tiet: "Ti·∫øt 3", gio: "08h30 - 09h10" },
    { tiet: "Ti·∫øt 4", gio: "09h15 - 09h55" },
    { tiet: "Ti·∫øt 5", gio: "10h00 - 10h40" },
  ],
  buoiChieu: [
    { tiet: "Ti·∫øt 1", gio: "14h00 - 14h40" },
    { tiet: "Ti·∫øt 2", gio: "14h45 - 15h25" },
    { tiet: "Ti·∫øt 3", gio: "15h30 - 16h10" },
    { tiet: "Ti·∫øt 4", gio: "16h15 - 16h55" },
  ],
});

const handleUpdate_Tab3 = async () => {
  setSaving(true);       // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ti·∫øn tr√¨nh
  setProgress(10);       // Kh·ªüi ƒë·ªông ·ªü m·ª©c 10%

  try {
    await setDoc(doc(db, "THOIGIANHOC", "thoiGian"), {
      buoiSang: thoiGianHoc.buoiSang,
      buoiChieu: thoiGianHoc.buoiChieu,
    });

    //console.log("‚úÖ L∆∞u Tab 3 th√†nh c√¥ng");
    setProgress(100);    // Ho√†n t·∫•t ti·∫øn tr√¨nh

    setTimeout(() => {
      setSaving(false);
      setProgress(0);
    }, 800); // Cho ng∆∞·ªùi d√πng th·∫•y hi·ªáu ·ª©ng ho√†n t·∫•t
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u Tab 3:", err);
    setSaving(false);
    setProgress(0);
  }
};


  return (
    <Container
      maxWidth={false}
      disableGutters
      sx={{
        px: { xs: 1, sm: 3 },
        py: 4,
        bgcolor: "#e3f2fd", // n·ªÅn xanh nh·∫°t
        minHeight: "100vh",
        display: "flex",
        justifyContent: "center",
        alignItems: "flex-start",
      }}
    >
      {/* CH·ªà S·ª¨A ·ªû D√íNG width: s·ª≠ d·ª•ng tabWidths[tab] */}
      <Card sx={{ width: tabWidths[tab] || "70%", boxShadow: 3, borderRadius: 2, transition: "width 0.3s ease" }}>
        <CardHeader
          title="THI·∫æT L·∫¨P H·ªÜ TH·ªêNG"
          //subheader="Qu·∫£n l√Ω th√¥ng tin chung, l·ªãch sinh ho·∫°t, th·ªùi gian h·ªçc v√† m√¥n h·ªçc"
          sx={{ textAlign: "center", pb: 0 }}
          titleTypographyProps={{
            align: "center",
            fontWeight: "bold",
            variant: "h5",
            sx: { color: "#1976d2", mt: 2, mb: 0 },
          }}
          subheaderTypographyProps={{
            align: "center",
            variant: "h6", // üëà tƒÉng c·ª° ch·ªØ (h6 thay cho subtitle1)
            sx: { color: "text.secondary", fontWeight: "bold", mt: 0.5, mb: 2 },
          }}
        />

        <CardContent>
          {/* Tabs */}
          <Tabs
            value={tab}
            onChange={handleChange}
            textColor="primary"
            indicatorColor="primary"
            variant="scrollable"
            scrollButtons="auto"
            sx={{ borderBottom: 1, borderColor: "divider" }}
          >
            <Tab icon={<InfoIcon />} iconPosition="start" label="Th√¥ng tin chung" />
            <Tab icon={<CalendarTodayIcon />} iconPosition="start" label="L·ªãch sinh ho·∫°t" />
            <Tab icon={<ScheduleIcon />} iconPosition="start" label="Th·ªùi gian h·ªçc" />
            <Tab icon={<MenuBookIcon />} iconPosition="start" label="Danh s√°ch m√¥n h·ªçc" />
          </Tabs>

          {/* Tab 1 - Th√¥ng tin chung */}
          <TabPanel value={tab} index={0}>
            <Typography
              variant="h6"
              align="center"
              fontWeight="bold"
              sx={{ color: "#1976d2", mb: 2 }}
            >
              TH√îNG TIN CHUNG
            </Typography>

            <Grid container spacing={2} direction="column" alignItems="center">
              <Grid item sx={{ mt: 0, mb: 0 }}>
                <TextField
                  label="·ª¶y ban nh√¢n d√¢n"
                  value={ubnd}                  // d√πng state
                  onChange={(e) => setUbnd(e.target.value)}
                  fullWidth
                  size="small"
                  sx={{ width: 300 }}
                />
              </Grid>

              <Grid item sx={{ mt: 0, mb: 0 }}>
                <TextField
                  label="Tr∆∞·ªùng ti·ªÉu h·ªçc"
                  value={truong}                // d√πng state
                  onChange={(e) => setTruong(e.target.value)}
                  fullWidth
                  size="small"
                  sx={{ width: 300 }}
                />
              </Grid>

              <Grid item sx={{ mt: 0, mb: 0 }}>
                <TextField
                  select
                  label="NƒÉm h·ªçc"
                  value={namHoc}
                  onChange={(e) => setNamHoc(e.target.value)}
                  fullWidth
                  size="small"
                  sx={{ width: 300 }}
                >
                  <MenuItem value="2025-2026">2025 - 2026</MenuItem>
                  <MenuItem value="2026-2027">2026 - 2027</MenuItem>
                  <MenuItem value="2027-2028">2027 - 2028</MenuItem>
                  <MenuItem value="2028-2029">2028 - 2029</MenuItem>
                  <MenuItem value="2029-2030">2029 - 2030</MenuItem>
                </TextField>
              </Grid>

              <Grid item sx={{ mt: 0, mb: 0 }}>
                <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale="vi">
                  <DatePicker
                    label="Ng√†y √°p d·ª•ng"
                    value={ngayApDung}
                    onChange={(newValue) => setNgayApDung(newValue)}
                    slotProps={{
                      textField: { fullWidth: true, size: "small", sx: { width: 300 } },
                    }}
                  />
                </LocalizationProvider>
              </Grid>
            </Grid>
            <Grid container justifyContent="center">
              <Grid item sx={{ mt: 0, mb: 0 }}>
                <Button
                  variant="contained"
                  onClick={handleUpdate_Tab1}
                  startIcon={<SaveIcon />}   // üëà icon b√™n tr√°i ch·ªØ
                  sx={{ minWidth: 120, mt: 3 }}
                >
                  L∆∞u
                </Button>
                {/* Thanh ti·∫øn tr√¨nh d∆∞·ªõi n√∫t L∆∞u */}
                  {saving && (
                    <Box sx={{ display: "flex", justifyContent: "center", mt: 2 }}>
                      <Box sx={{ width: 200, textAlign: "center" }}>
                        <LinearProgress variant="determinate" value={progress} sx={{ mb: 0, height: 3, borderRadius: 1 }} />
                        <Typography variant="caption" color="text.secondary">
                          ƒêang l∆∞u... {progress}%
                        </Typography>
                      </Box>
                    </Box>
                  )}
              </Grid>
            </Grid>
          </TabPanel>

          {/* Tab 2 - L·ªãch sinh ho·∫°t */}
          <TabPanel value={tab} index={1}>
            <Typography
              variant="h6"
              align="center"
              fontWeight="bold"
              sx={{ color: "#1976d2", mb: 2 }}
            >
              L·ªäCH SINH HO·∫†T T·ªî CHUY√äN M√îN
            </Typography>

            <TableContainer
              component={Paper}
              sx={{ mb: 3, width: "400px", mx: "auto" }} // üëà th√™m width v√† cƒÉn gi·ªØa
            >
              <Table size="small" stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell
                      align="center"
                      sx={{
                        width: "40%",
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                      }}
                    >
                      KH·ªêI
                    </TableCell>
                    <TableCell
                      align="center"
                      sx={{
                        width: "60%",
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                      }}
                    >
                      TH·ª®
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {lichSinhHoat.map((row, i) => (
                    <TableRow key={row.khoi}>
                      <TableCell align="center">{row.khoi}</TableCell>
                      <TableCell align="center">
                        <TextField
                          select
                          size="small"
                          fullWidth
                          value={row.thu}   // üëà d√πng state
                          onChange={(e) => {
                            const newLich = [...lichSinhHoat];
                            newLich[i].thu = e.target.value;
                            setLichSinhHoat(newLich);
                          }}
                        >
                          {["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"].map((thu) => (
                            <MenuItem key={thu} value={thu}>
                              {thu}
                            </MenuItem>
                          ))}
                        </TextField>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>

              </Table>
            </TableContainer>
            <Grid container justifyContent="center">
              <Grid item sx={{ mt: 0, mb: 0 }}>
                <Button
                  variant="contained"
                  onClick={handleUpdate_Tab2}
                  startIcon={<SaveIcon />}   // üëà icon b√™n tr√°i ch·ªØ
                  sx={{ minWidth: 120, mt: 0 }}
                >
                  L∆∞u
                </Button>
                {/* Thanh ti·∫øn tr√¨nh d∆∞·ªõi n√∫t L∆∞u */}
                  {/* Thanh ti·∫øn tr√¨nh d∆∞·ªõi n√∫t L∆∞u - ch·ªâ hi·ªÉn th·ªã ·ªü Tab 2 */}
                    {saving && tab === 1 && (
                      <Box sx={{ display: "flex", justifyContent: "center", mt: 2 }}>
                        <Box sx={{ width: 200, textAlign: "center" }}>
                          <LinearProgress
                            variant="determinate"
                            value={progress}
                            sx={{ mb: 0, height: 3, borderRadius: 1 }}
                          />
                          <Typography variant="caption" color="text.secondary">
                            ƒêang l∆∞u... {progress}%
                          </Typography>
                        </Box>
                      </Box>
                    )}
              </Grid>
            </Grid>
          </TabPanel>

          <TabPanel value={tab} index={2}>
            <Typography
              variant="h6"
              align="center"
              fontWeight="bold"
              sx={{ color: "#1976d2", mb: 0 }}
            >
              TH·ªúI GIAN H·ªåC
            </Typography>

            {/* Bu·ªïi s√°ng */}
            <Typography
              variant="subtitle1"
              fontWeight="bold"
              sx={{ mb: 1, ml: 8 }}   // üëà l√πi qua ph·∫£i 1 ch√∫t
            >
              BU·ªîI S√ÅNG
            </Typography>
            <TableContainer
              component={Paper}
              sx={{ mb: 3, width: "400px", mx: "auto" }}   // üëà ch·ªânh ƒë·ªô r·ªông th·ªß c√¥ng
            >
              <Table size="small" stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell
                      align="center"
                      sx={{
                        width: "40%",
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                      }}
                    >
                      TI·∫æT
                    </TableCell>
                    <TableCell
                      align="center"
                      sx={{
                        width: "60%",
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                      }}
                    >
                      TH·ªúI GIAN
                    </TableCell>
                  </TableRow>
                </TableHead>
                {/* Bu·ªïi s√°ng */}
                <TableBody>
                  {thoiGianHoc.buoiSang.map((row, idx) => (
                    <TableRow key={idx}>
                      <TableCell align="center">
                        <TextField
                          select
                          size="small"
                          fullWidth
                          value={row.tiet}
                          onChange={(e) => {
                            const newBuoiSang = [...thoiGianHoc.buoiSang];
                            newBuoiSang[idx].tiet = e.target.value;
                            setThoiGianHoc({ ...thoiGianHoc, buoiSang: newBuoiSang });
                          }}
                        >
                          {["Ch√†o c·ªù", "Ti·∫øt 1", "Ti·∫øt 2", "Ti·∫øt 3", "Ti·∫øt 4", "Ti·∫øt 5", "Ra ch∆°i"].map(
                            (option) => (
                              <MenuItem key={option} value={option}>
                                {option}
                              </MenuItem>
                            )
                          )}
                        </TextField>
                      </TableCell>
                      <TableCell align="center">
                        <TextField
                          size="small"
                          fullWidth
                          value={row.gio}
                          onChange={(e) => {
                            const newBuoiSang = [...thoiGianHoc.buoiSang];
                            newBuoiSang[idx].gio = e.target.value;
                            setThoiGianHoc({ ...thoiGianHoc, buoiSang: newBuoiSang });
                          }}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>

            {/* Bu·ªïi chi·ªÅu */}
            <Typography
              variant="subtitle1"
              fontWeight="bold"
              sx={{ mb: 1, ml: 8 }}   // üëà l√πi qua ph·∫£i 1 ch√∫t
            >
              BU·ªîI CHI·ªÄU
            </Typography>
            <TableContainer
              component={Paper}
              sx={{ width: "400px", mx: "auto" }}   // üëà ch·ªânh ri√™ng cho bu·ªïi chi·ªÅu
            >
              <Table size="small" stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell
                      align="center"
                      sx={{
                        width: "40%",
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                      }}
                    >
                      TI·∫æT
                    </TableCell>
                    <TableCell
                      align="center"
                      sx={{
                        width: "60%",
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                      }}
                    >
                      TH·ªúI GIAN
                    </TableCell>
                  </TableRow>
                </TableHead>
                {/* Bu·ªïi chi·ªÅu */}
                <TableBody>
                  {thoiGianHoc.buoiChieu.map((row, idx) => (
                    <TableRow key={idx}>
                      <TableCell align="center">
                        <TextField
                          select
                          size="small"
                          fullWidth
                          value={row.tiet}
                          onChange={(e) => {
                            const newBuoiChieu = [...thoiGianHoc.buoiChieu];
                            newBuoiChieu[idx].tiet = e.target.value;
                            setThoiGianHoc({ ...thoiGianHoc, buoiChieu: newBuoiChieu });
                          }}
                        >
                          {["Ti·∫øt 1", "Ti·∫øt 2", "Ti·∫øt 3", "Ti·∫øt 4", "Ra ch∆°i"].map((option) => (
                            <MenuItem key={option} value={option}>
                              {option}
                            </MenuItem>
                          ))}
                        </TextField>
                      </TableCell>
                      <TableCell align="center">
                        <TextField
                          size="small"
                          fullWidth
                          value={row.gio}
                          onChange={(e) => {
                            const newBuoiChieu = [...thoiGianHoc.buoiChieu];
                            newBuoiChieu[idx].gio = e.target.value;
                            setThoiGianHoc({ ...thoiGianHoc, buoiChieu: newBuoiChieu });
                          }}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            <Grid container justifyContent="center">
              <Grid item sx={{ mt: 0, mb: 0 }}>
                <Button
                  variant="contained"
                  onClick={handleUpdate_Tab3}
                  startIcon={<SaveIcon />}   // üëà icon b√™n tr√°i ch·ªØ
                  sx={{ minWidth: 120, mt: 3 }}
                >
                  L∆∞u
                </Button>
                {/* Thanh ti·∫øn tr√¨nh d∆∞·ªõi n√∫t L∆∞u */}
                  {saving && tab === 2 && (
                    <Box sx={{ display: "flex", justifyContent: "center", mt: 2 }}>
                      <Box sx={{ width: 200, textAlign: "center" }}>
                        <LinearProgress
                          variant="determinate"
                          value={progress}
                          sx={{ mb: 0, height: 3, borderRadius: 1 }}
                        />
                        <Typography variant="caption" color="text.secondary">
                          ƒêang l∆∞u... {progress}%
                        </Typography>
                      </Box>
                    </Box>
                  )}
              </Grid>
            </Grid>
          </TabPanel>


          {/* Tab 4 - Danh s√°ch m√¥n h·ªçc */}
          <TabPanel value={tab} index={3}>
            <Typography
              variant="h6"
              align="center"
              fontWeight="bold"
              sx={{ color: "#1976d2", mb: 2 }}
            >
              CH·ªåN M√îN H·ªåC
            </Typography>

            <TableContainer component={Paper}>
              <Table size="small" stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "60px",
                        py: 1,
                      }}
                    >
                      STT
                    </TableCell>
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        py: 1,
                      }}
                    >
                      T√™n m√¥n h·ªçc
                    </TableCell>

                    {/* L·ªöP 1 */}
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "80px",
                        py: 1,
                      }}
                    >
                      L·ªöP 1
                    </TableCell>

                    {/* L·ªöP 2 */}
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "80px",
                        py: 1,
                      }}
                    >
                      L·ªöP 2
                    </TableCell>

                    {/* L·ªöP 3 */}
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "80px",
                        py: 1,
                      }}
                    >
                      L·ªöP 3
                    </TableCell>

                    {/* L·ªöP 4 */}
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "80px",
                        py: 1,
                      }}
                    >
                      L·ªöP 4
                    </TableCell>

                    {/* L·ªöP 5 */}
                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "80px",
                        py: 1,
                      }}
                    >
                      L·ªöP 5
                    </TableCell>

                    <TableCell
                      align="center"
                      sx={{
                        backgroundColor: "#1976d2",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        width: "120px",
                        py: 1,
                      }}
                    >
                      ƒêi·ªÅu ch·ªânh
                    </TableCell>
                  </TableRow>
                </TableHead>

                <TableBody>
                  {Object.entries(monHoc).map(([mon, data], idx) => (
                    <TableRow
                      key={mon}
                      onClick={() => {
                        if (selectedMon !== mon) {
                          setSelectedMon(mon);
                          setIsEditing(false);
                          setNewMon("");
                        }
                      }}
                      sx={{
                        backgroundColor: selectedMon === mon ? "#e0e0e0" : "inherit",
                        "&:hover": { backgroundColor: "#f5f5f5", cursor: "pointer" },
                        transition: "background-color 0.2s ease",
                        height: 30,
                      }}
                    >
                      <TableCell align="center" sx={{ py: 0.5 }}>
                        {idx + 1}
                      </TableCell>
                      <TableCell sx={{ py: 0.5 }}>{mon}</TableCell>

                      {/* Checkbox L·ªöP 1 */}
                      <TableCell align="center" sx={{ py: 0.5 }}>
                        <Checkbox
                          checked={data.lop1 || false}
                          size="small"
                          onChange={(e) =>
                            setMonHoc({
                              ...monHoc,
                              [mon]: { ...data, lop1: e.target.checked },
                            })
                          }
                        />
                      </TableCell>

                      {/* Checkbox L·ªöP 2 */}
                      <TableCell align="center" sx={{ py: 0.5 }}>
                        <Checkbox
                          checked={data.lop2 || false}
                          size="small"
                          onChange={(e) =>
                            setMonHoc({
                              ...monHoc,
                              [mon]: { ...data, lop2: e.target.checked },
                            })
                          }
                        />
                      </TableCell>

                      {/* Checkbox L·ªöP 3 */}
                      <TableCell align="center" sx={{ py: 0.5 }}>
                        <Checkbox
                          checked={data.lop3 || false}
                          size="small"
                          onChange={(e) =>
                            setMonHoc({
                              ...monHoc,
                              [mon]: { ...data, lop3: e.target.checked },
                            })
                          }
                        />
                      </TableCell>

                      {/* Checkbox L·ªöP 4 */}
                      <TableCell align="center" sx={{ py: 0.5 }}>
                        <Checkbox
                          checked={data.lop4 || false}
                          size="small"
                          onChange={(e) =>
                            setMonHoc({
                              ...monHoc,
                              [mon]: { ...data, lop4: e.target.checked },
                            })
                          }
                        />
                      </TableCell>

                      {/* Checkbox L·ªöP 5 */}
                      <TableCell align="center" sx={{ py: 0.5 }}>
                        <Checkbox
                          checked={data.lop5 || false}
                          size="small"
                          onChange={(e) =>
                            setMonHoc({
                              ...monHoc,
                              [mon]: { ...data, lop5: e.target.checked },
                            })
                          }
                        />
                      </TableCell>

                      <TableCell align="center" sx={{ py: 0.5 }}>
                        {selectedMon === mon && (
                          <Stack direction="row" spacing={1} justifyContent="center">
                            <Tooltip title="Ch·ªânh s·ª≠a">
                              <IconButton
                                color="primary"
                                size="small"
                                onClick={() => {
                                  setIsEditing(true);
                                  setNewMon(mon);
                                }}
                              >
                                <EditIcon />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="X√≥a">
                              <IconButton
                                color="error"
                                size="small"
                                onClick={() => handleDeleteMon(mon)}
                              >
                                <DeleteIcon />
                              </IconButton>
                            </Tooltip>
                          </Stack>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>

            <Box sx={{ display: "flex", gap: 2, mt: 3, justifyContent: "center" }}>
              <TextField
                label="T√™n m√¥n h·ªçc"
                value={newMon}
                onChange={(e) => setNewMon(e.target.value)}
                size="small"
                sx={{ width: 250 }}
              />
              {isEditing ? (
                <>
                  <Button variant="outlined" color="warning" onClick={handleEditMon}>
                    S·ª≠a
                  </Button>
                  <Button
                    variant="text"
                    color="inherit"
                    onClick={() => {
                      setIsEditing(false);
                      setNewMon("");
                      setSelectedMon(null);
                    }}
                  >
                    H·ªßy
                  </Button>
                </>
              ) : (
                <>
                  <Button
                    variant="contained"
                    onClick={handleAddMon}
                    startIcon={<AddIcon />}   // icon b√™n tr√°i ch·ªØ "Th√™m"
                    sx={{ minWidth: 120 }}
                  >
                    Th√™m
                  </Button>

                  <Button
                    variant="contained"
                    onClick={handleUpdate_Tab4}
                    startIcon={<SaveIcon />}   // üëà icon n·∫±m b√™n tr√°i ch·ªØ
                    sx={{ minWidth: 120 }}
                  >
                    L∆∞u
                  </Button>                
                </>
              )}
            </Box>
            {saving && tab === 3 && (
              <Box sx={{ display: "flex", justifyContent: "center", mt: 2 }}>
                <Box sx={{ width: 200, textAlign: "center" }}>
                  <LinearProgress
                    variant="determinate"
                    value={progress}
                    sx={{ mb: 0, height: 3, borderRadius: 1 }}
                  />
                  <Typography variant="caption" color="text.secondary">
                    ƒêang l∆∞u... {progress}%
                  </Typography>
                </Box>
              </Box>
            )}  
          </TabPanel>
        </CardContent>
      </Card>
    </Container>
  );
}
