import { createContext, useContext, useState, useEffect } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../firebase"; // ƒê∆∞·ªùng d·∫´n t·ªõi c·∫•u h√¨nh Firebase

export const ContextGVCN = createContext();

export const useGVCN = () => useContext(ContextGVCN);

export const GVCNProvider = ({ children }) => {
  // L∆∞u danh s√°ch GVCN: { hoTen, lop }
  const [contextRows, setContextRows] = useState(() => {
    const saved = localStorage.getItem("gvcn_contextRows");
    return saved ? JSON.parse(saved) : [];
  });

  // L∆∞u to√†n b·ªô TKB: { [lop]: { schedule, ngayApDung } }
  const [allSchedules, setAllSchedules] = useState(() => {
    const saved = localStorage.getItem("gvcn_allSchedules");
    return saved ? JSON.parse(saved) : {};
  });

  // Cache th·ªùi kh√≥a bi·ªÉu t·ª´ng l·ªõp ƒë·ªÉ tƒÉng t·ªëc hi·ªÉn th·ªã
  const [contextSchedule, setContextSchedule] = useState(() => {
    const saved = localStorage.getItem("gvcn_contextSchedule");
    return saved ? JSON.parse(saved) : {};
  });

  // Cache danh s√°ch m√¥n h·ªçc t·ª´ng l·ªõp
  const [contextMonHoc, setContextMonHoc] = useState(() => {
    const saved = localStorage.getItem("gvcn_contextMonHoc");
    return saved ? JSON.parse(saved) : {};
  });

  // üìù T·ª± ƒë·ªông l∆∞u v√†o localStorage khi d·ªØ li·ªáu thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem("gvcn_contextRows", JSON.stringify(contextRows));
  }, [contextRows]);

  useEffect(() => {
    localStorage.setItem("gvcn_allSchedules", JSON.stringify(allSchedules));
  }, [allSchedules]);

  useEffect(() => {
    localStorage.setItem("gvcn_contextSchedule", JSON.stringify(contextSchedule));
  }, [contextSchedule]);

  useEffect(() => {
    localStorage.setItem("gvcn_contextMonHoc", JSON.stringify(contextMonHoc));
  }, [contextMonHoc]);

  // üöÄ T·∫£i d·ªØ li·ªáu TKB t·ª´ Firestore n·∫øu ch∆∞a c√≥ trong context
  useEffect(() => {
    const preloadTKB = async () => {
      if (Object.keys(contextSchedule).length === 0) {
        try {
          const snapshot = await getDocs(collection(db, "TKB_LOP_2025-2026"));
          const newSchedule = {};

          snapshot.forEach(doc => {
            const data = doc.data();
            const lop = doc.id;
            newSchedule[lop] = data.schedule || { S√ÅNG: {}, CHI·ªÄU: {} };
          });

          setContextSchedule(newSchedule);
          //console.log("‚úÖ TKB ƒë√£ ƒë∆∞·ª£c t·∫£i v√†o contextSchedule");
        } catch (err) {
          console.error("‚ùå L·ªói khi t·∫£i TKB t·ª´ Firestore:", err);
        }
      }
    };

    preloadTKB();
  }, []);

  return (
    <ContextGVCN.Provider
      value={{
        contextRows,
        setContextRows,
        allSchedules,
        setAllSchedules,
        contextSchedule,
        setContextSchedule,
        contextMonHoc,         // ‚úÖ th√™m v√†o context
        setContextMonHoc       // ‚úÖ th√™m v√†o context
      }}
    >
      {children}
    </ContextGVCN.Provider>
  );
};