// src/hooks/useSaveAsTkbAllTeachers.jsx
import { useState } from "react";
import { doc, setDoc, collection } from "firebase/firestore";
import { db } from "../firebase";
import { useSchedule } from "../contexts/ScheduleContext";
import { useOpenFile } from "../contexts/OpenFileContext";

// Chuy·ªÉn Map ho·∫∑c object sang plain object
const mapToObject = (map) => {
  if (!map) return {};
  if (map instanceof Map) return Object.fromEntries(map);
  if (typeof map === "object") return map;
  return {};
};

// Chu·∫©n h√≥a d·ªØ li·ªáu TKB ƒë·ªÉ l∆∞u, ƒë·∫£m b·∫£o ƒë√∫ng s·ªë slot s√°ng/chi·ªÅu
const normalizeTkbData = (tkbAllTeachers, openFileName) => {
  const teachersObj = mapToObject(tkbAllTeachers);
  const tkbToSave = {};

  console.log("üîç D·ªØ li·ªáu g·ªëc tr∆∞·ªõc chu·∫©n h√≥a:", JSON.parse(JSON.stringify(teachersObj)));

  // ‚úÖ G√°n l·∫°i period theo th·ª© t·ª± m·∫£ng
  const normalizeDaySequential = (arr, len) => {
    const slots = Array(len).fill(null);
    if (Array.isArray(arr)) {
      arr.forEach((item, index) => {
        if (item && index < len) {
          slots[index] = { ...item, period: index + 1 };
        }
      });
    }
    return slots;
  };

  Object.entries(teachersObj).forEach(([key, value]) => {
    if (key === openFileName) return;

    const teacherData = mapToObject(value);

    if (openFileName === "TKB ch∆∞a l∆∞u") {
      // ‚úÖ G√°n l·∫°i period cho t·ª´ng bu·ªïi
      const normalizedDays = {};
      Object.entries(teacherData).forEach(([day, dayData]) => {
        const dayObj = mapToObject(dayData);
        const morning = normalizeDaySequential(dayObj.morning || [], 5);
        const afternoon = normalizeDaySequential(dayObj.afternoon || [], 4);
        normalizedDays[day] = { morning, afternoon };
      });
      tkbToSave[key] = normalizedDays;
      return;
    }

    // ‚úÖ Tr∆∞·ªùng h·ª£p gi√°o vi√™n tr·ª±c ti·∫øp (c√≥ morning/afternoon)
    if (teacherData.morning || teacherData.afternoon) {
      tkbToSave[key] = {
        morning: normalizeDaySequential(teacherData.morning || [], 5),
        afternoon: normalizeDaySequential(teacherData.afternoon || [], 4),
      };
      return;
    }

    // ‚úÖ Tr∆∞·ªùng h·ª£p file ƒë√£ l∆∞u (nested theo ng√†y)
    const normalizedTeacherData = {};
    Object.entries(teacherData).forEach(([day, dayData]) => {
      const dayObj = mapToObject(dayData);
      const morning = normalizeDaySequential(dayObj.morning || [], 5);
      const afternoon = normalizeDaySequential(dayObj.afternoon || [], 4);
      normalizedTeacherData[day] = { morning, afternoon };
    });

    tkbToSave[key] = normalizedTeacherData;
  });

  console.log("‚úÖ D·ªØ li·ªáu sau chu·∫©n h√≥a:", JSON.parse(JSON.stringify(tkbToSave)));

  return tkbToSave;
};

export const useSaveAsTkbAllTeachers = () => {
  const { tkbAllTeachers, setTkbAllTeachers, setCurrentDocId } = useSchedule();
  const [saving, setSaving] = useState(false);
  const [saveProgress, setSaveProgress] = useState(0);
  //const { setOpenFileName } = useOpenFile(); // üîπ th√™m d√≤ng n√†y
  const { openFileName, setOpenFileName } = useOpenFile();


  const saveAsTkbAllTeachers = async (docId) => {
    if (!docId || typeof docId !== "string") {
      alert("‚ö†Ô∏è T√™n t·ªáp kh√¥ng h·ª£p l·ªá!");
      return;
    }

    if (!tkbAllTeachers || Object.keys(tkbAllTeachers).length === 0) {
      alert("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u!");
      return;
    }

    try {
      setSaving(true);
      setSaveProgress(0);

      let tkbToSave;

      if (openFileName === "TKB ch∆∞a l∆∞u") {
        // üîπ Ch·ªâ l·∫•y d·ªØ li·ªáu trong "TKB ch∆∞a l∆∞u"
        const sourceTkb = tkbAllTeachers[openFileName];
        tkbToSave = normalizeTkbData(sourceTkb, openFileName);
      } else {
        // üîπ V·ªõi file ƒë√£ l∆∞u th√¨ truy·ªÅn c·∫£ tkbAllTeachers
        tkbToSave = normalizeTkbData(tkbAllTeachers, openFileName);
      }

      if (!tkbToSave || Object.keys(tkbToSave).length === 0) {
        //console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ l∆∞u!");
        alert("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ l∆∞u!");
        return;
      }

      //console.log("‚úÖ D·ªØ li·ªáu sau chu·∫©n h√≥a:", tkbToSave);


      // M√¥ ph·ªèng ti·∫øn tr√¨nh l∆∞u
      const steps = 3;
      for (let i = 1; i <= steps; i++) {
        await new Promise((res) => setTimeout(res, 200));
        setSaveProgress(Math.round((i / steps) * 100));
      }

      // L∆∞u v√†o Firestore
      const docRef = doc(collection(db, "TKB_GVBM"), docId);
      await setDoc(docRef, { tkb: tkbToSave, updatedAt: new Date() });

      // ƒê·ªìng b·ªô context: g·∫Øn docId v√† ghi ƒë√® tkbAllTeachers
      setCurrentDocId(docId);
      setTkbAllTeachers({ [docId]: tkbToSave });
      // üîπ C·∫≠p nh·∫≠t t√™n file v·ª´a l∆∞u ƒë·ªÉ hi·ªÉn th·ªã tr√™n menu
      setOpenFileName(docId);

      //console.log(`‚úÖ ƒê√£ l∆∞u TKB v√† c·∫≠p nh·∫≠t context: ${docId}`);
    } catch (error) {
      console.error("‚ùå L·ªói khi l∆∞u TKB:", error);
      alert("‚ùå L∆∞u th·∫•t b·∫°i. Xem console ƒë·ªÉ bi·∫øt chi ti·∫øt.");
    } finally {
      setSaving(false);
      setSaveProgress(0);
    }
  };

  return { saveAsTkbAllTeachers, saving, saveProgress };
};
